var C = Object.defineProperty; var E = (d, e, t) => e in d ? C(d, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : d[e] = t; var o = (d, e, t) => (E(d, typeof e != "symbol" ? e + "" : e, t), t); (function () { const e = document.createElement("link").relList; if (e && e.supports && e.supports("modulepreload")) return; for (const a of document.querySelectorAll('link[rel="modulepreload"]')) n(a); new MutationObserver(a => { for (const r of a) if (r.type === "childList") for (const i of r.addedNodes) i.tagName === "LINK" && i.rel === "modulepreload" && n(i) }).observe(document, { childList: !0, subtree: !0 }); function t(a) { const r = {}; return a.integrity && (r.integrity = a.integrity), a.referrerPolicy && (r.referrerPolicy = a.referrerPolicy), a.crossOrigin === "use-credentials" ? r.credentials = "include" : a.crossOrigin === "anonymous" ? r.credentials = "omit" : r.credentials = "same-origin", r } function n(a) { if (a.ep) return; a.ep = !0; const r = t(a); fetch(a.href, r) } })(); const u = ["Audi", "BMW", "Ford", "Honda", "Hyundai", "Kia", "Lada", "Mazda", "Mercedes", "Mitsubishi", "Nissan", "Renault", "Skoda", "Toyota", "Volkswagen", "Tesla"]; console.log(u); class m { constructor() { o(this, "wrapperGarage", document.createElement("div")); o(this, "createUpdateGarage", document.createElement("div")); o(this, "pageTitleRaceGarage", document.createElement("div")); o(this, "garageCount", document.createElement("div")); o(this, "pageCount", document.createElement("div")); o(this, "inputName", document.createElement("input")); o(this, "inputRename", document.createElement("input")); o(this, "inputColorCreate", document.createElement("input")); o(this, "inputColorUpdate", document.createElement("input")); o(this, "buttonCreate", document.createElement("button")); o(this, "buttonUpdate", document.createElement("button")); o(this, "wrapperPage", document.createElement("div")); o(this, "wrapperCreationAndEditing", document.createElement("div")); o(this, "prevNext", document.createElement("div")); o(this, "selectCar", 0); o(this, "arrayCars", []); o(this, "arrayPromise", []) } pageBlockGenerate(e) { this.wrapperPage.innerHTML = ""; for (let t = 0; t < e.length; t++)this.wrapperPage.append(this.createRoadCars(e[t].name, e[t].color, e[t].id)) } getGarageApi() { let e = this.getLocalStorage(); return fetch(`http://127.0.0.1:3000/garage?_page=${e.page}&_limit=${e.limit}`) } getGarageLength() { fetch("http://127.0.0.1:3000/garage").then(e => e.json()).then(e => { this.setTheQuantity(e.length) }) } postCreateCars(e, t) { let n, a = !1; e && t ? n = { name: e, color: t } : (n = { name: this.inputName.value, color: this.inputColorCreate.value }, a = !0), fetch("http://127.0.0.1:3000/garage", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(n) }).then(r => r.json()).then(r => { a && (console.log(123456), this.buttonDisabledUpload()) }) } postUpdateCars() { if (this.selectCar) { const e = { name: this.inputRename.value, color: this.inputColorUpdate.value }; Array.from(this.wrapperPage.children).forEach(t => { Number(t.id) === this.selectCar && (t.querySelector(".name-car").textContent = this.inputRename.value, t.querySelector(".icon-1299198").style.color = this.inputColorUpdate.value) }), fetch(`http://127.0.0.1:3000/garage/${this.selectCar}`, { method: "PUT", headers: { "Content-Type": "application/json" }, body: JSON.stringify(e) }) } } postDeleteCars() { this.selectCar && fetch(`http://127.0.0.1:3000/garage/${this.selectCar}`, { method: "DELETE" }), this.buttonDisabledUpload() } generateOneHundredCars() { let e = Array.from({ length: 100 }); e = e.map(() => ({ name: u[Math.floor(0 + Math.random() * (0 + 15))], color: this.generetColorRandom() })), e.forEach(t => { this.postCreateCars(t.name, t.color) }), console.log(e), this.buttonDisabledUpload() } updatePageGarageUniversal() { this.getGarageApi().then(e => e.json()).then(e => { this.pageBlockGenerate(e), this.arrayCars = e, this.getGarageLength(), console.log(e) }) } createRoadCars(e, t, n) { const a = document.createElement("div"), r = document.createElement("div"), i = document.createElement("div"), l = document.createElement("div"), s = document.createElement("span"), c = document.createElement("img"), g = document.createElement("div"); return a.id = "" + n, r.classList.add("create-road-cars-block1"), i.classList.add("create-road-cars-block2"), l.classList.add("create-road-cars-block3"), g.textContent = "-".repeat(500), s.classList.add("name-car"), g.classList.add("road-line"), s.textContent = e, s.style.color = "#FFFF00", c.classList.add("img-flag"), c.src = "./assets/pngegg.png", r.append(this.createButton1("select", "select", n, e, t), this.createButton1("remove", "remove", n), s), i.append(this.createManagementBtn("A", ["btn-management", "btn-management-active"], n), this.createManagementBtn("B", ["btn-management"], n)), l.append(this.createCar(t), c, g), a.append(r, i, l), a } createButton1(e, t, n, a, r) { const i = document.createElement("button"); return e === "select" && i.addEventListener("click", () => { this.inputRename.disabled = !1, this.inputColorUpdate.disabled = !1, this.buttonUpdate.disabled = !1, this.inputRename.value = a, this.inputColorUpdate.value = r, this.selectCar = n }), e === "remove" && i.addEventListener("click", () => { this.selectCar = n, this.postDeleteCars() }), t === "generate-cars" && i.addEventListener("click", () => { this.generateOneHundredCars() }), e === "UPDATE" && (i.disabled = !0), i.classList.add("custom-btn", "btn-2", t), i.textContent = e, t === "generate-cars" && (i.style.width = "120px"), i } createButton2(e, t) { const n = document.createElement("button"); return e === "prev" && n.addEventListener("click", () => { this.setPageLimit("prev") }), e === "next" && n.addEventListener("click", () => { this.setPageLimit("next") }), e === "RACE" && n.addEventListener("click", () => { this.RaceGarage() }), e === "RESET" && n.addEventListener("click", () => { this.ResetGarage() }), n.classList.add("custom-btn", "btn-3", t), n.textContent = e, n } createManagementBtn(e, t, n) { const a = document.createElement("div"); return e === "A" && a.addEventListener("click", r => { this.startedCar(n, r.currentTarget) }), e === "B" && a.addEventListener("click", r => { this.stopedCar(n, r.currentTarget) }), a.classList.add(...t), a.textContent = e, a } createCar(e) { const t = document.createElement("div"); return t.addEventListener("transitionend", function (n) { console.log(n), n.target.style.left = "85%" }), t.classList.add("icon-1299198"), e === void 0 ? t.style.color = this.generetColorRandom() : t.style.color = e, t } generetColorRandom() { let e = "#"; return e += Math.floor(16 + Math.random() * (255 - 16)).toString(16), e += Math.floor(16 + Math.random() * (255 - 16)).toString(16), e += Math.floor(16 + Math.random() * (255 - 16)).toString(16), e } setTheQuantity(e) { this.garageCount.textContent = `Garage (${e})`, this.garageCount.classList.add("set-the-quantity") } setThePages(e) { this.pageCount.textContent = `Page #${e}`, this.pageCount.classList.add("set-the-pages") } generationOfTheGaragePage(e) { var n, a; localStorage.getItem("pageLimit") || localStorage.setItem("pageLimit", JSON.stringify({ page: 1, limit: 7 })), localStorage.getItem("pageLimitWin") || localStorage.setItem("pageLimitWin", JSON.stringify({ page: 1, limit: 7 })), localStorage.getItem("order") || localStorage.setItem("order", JSON.stringify({ wins: "ASC", id: "ASC", time: "ASC" })), this.getGarageApi().then(r => r.json()).then(r => { this.pageBlockGenerate(r), this.arrayCars = r, console.log(r) }), this.getGarageLength(); let t = this.getLocalStorage(); if (this.setThePages(t.page), this.panelPrevNext(), this.garageCreationAndEditingPanel(), this.pageTitleRaceGarage.innerHTML = "", console.log(this.pageTitleRaceGarage.cloneNode()), this.pageTitleRaceGarage.append(this.wrapperCreationAndEditing, this.garageCount, this.pageCount, this.wrapperPage, this.prevNext), e) { let r = (n = document.getElementById("app")) == null ? void 0 : n.children; for (let i = 1; i < r.length; i++)r[i].remove(); (a = document.querySelector("#app")) == null || a.append(this.pageTitleRaceGarage) } } garageCreationAndEditingPanel() { const e = document.createElement("div"), t = document.createElement("div"), n = document.createElement("div"); e.classList.add("garage-creation-and-editing-panel-block1"), t.classList.add("garage-creation-and-editing-panel-block2"), n.classList.add("garage-creation-and-editing-panel-block3"), this.inputName.classList.add("input-name"), this.inputRename.classList.add("input-rename"), this.inputRename.disabled = !0, this.inputColorCreate.type = "color", this.inputColorUpdate.type = "color", this.inputColorUpdate.disabled = !0, this.buttonCreate = this.createButton1("CREATE", "create"), this.buttonCreate.addEventListener("click", () => { this.postCreateCars() }), this.buttonUpdate = this.createButton1("UPDATE", "update"), this.buttonUpdate.addEventListener("click", () => { this.postUpdateCars(), this.inputRename.disabled = !0, this.inputColorUpdate.disabled = !0, this.buttonUpdate.disabled = !0 }), e.append(this.inputName, this.inputColorCreate, this.buttonCreate), t.append(this.inputRename, this.inputColorUpdate, this.buttonUpdate), n.append(this.createButton2("RACE", "RACE"), this.createButton2("RESET", "RESET"), this.createButton1("GENERATE CARS", "generate-cars")), this.wrapperCreationAndEditing.innerHTML = "", this.wrapperCreationAndEditing.append(e, t, n) } panelPrevNext() { return console.log(this.garageCount.textContent), this.prevNext.innerHTML = "", this.prevNext.append(this.createButton2("prev", "prev"), this.createButton2("next", "next")), this.prevNext.classList.add("prev-next"), this.buttonDisabledUpload(), this.prevNext } setPageLimit(e) { e === "next" && this.buttonDisabled(e, document.querySelector(".next")), e === "prev" && this.buttonDisabled(e, document.querySelector(".prev")) } nexPageGarage() { this.getGarageApi().then(e => e.json()).then(e => { this.pageBlockGenerate(e), this.arrayCars = e, console.log(e) }) } getLocalStorage() { let e, t = localStorage.getItem("pageLimit"); return JSON.parse(t), e = JSON.parse(t), e } buttonDisabled(e, t) { let n = this.getLocalStorage(); fetch("http://127.0.0.1:3000/garage").then(a => a.json()).then(a => { let r; r = a.length, e === "prev" && (console.log(n.page), n.page -= 1, n.page > 1 ? n.page !== Math.ceil(r / 7) ? (t.disabled = !1, document.querySelector(".next").disabled = !1) : (t.disabled = !1, document.querySelector(".next").disabled = !0) : n.page === 1 && (t.disabled = !0, n.page === Math.ceil(r / 7) ? document.querySelector(".next").disabled = !0 : document.querySelector(".next").disabled = !1)), e === "next" && (n.page += 1, n.page === Math.ceil(r / 7) ? (t.disabled = !0, n.page !== 1 && (document.querySelector(".prev").disabled = !1)) : n.page < Math.ceil(r / 7) && (t.disabled = !1, n.page !== 1 && (document.querySelector(".prev").disabled = !1))), this.setThePages(n.page), localStorage.setItem("pageLimit", JSON.stringify(n)), this.updatePageGarageUniversal() }) } buttonDisabledUpload() { let e = this.getLocalStorage(); console.log(e.page, Math.ceil(1 / 7)), fetch("http://127.0.0.1:3000/garage").then(t => t.json()).then(t => { let n; n = t.length, console.log(e.page, Math.ceil(n / 7)), e.page === Math.ceil(n / 7) && (console.log(1), document.querySelector(".prev").disabled = !0, document.querySelector(".next").disabled = !0), e.page === 1 && e.page < Math.ceil(n / 7) && (console.log(2), document.querySelector(".prev").disabled = !0, document.querySelector(".next").disabled = !1), e.page > 1 && e.page === Math.ceil(n / 7) && (console.log(3), document.querySelector(".prev").disabled = !1, document.querySelector(".next").disabled = !0), this.updatePageGarageUniversal() }) } startedCar(e, t) { localStorage.setItem("started", "true"), fetch(`http://127.0.0.1:3000/engine?id=${e}&status=started`, { method: "PATCH" }).then(n => n.json()).then(n => { console.log(n, "--------------------------"), this.arrayPromise.push(this.driveCar(e, t, n)), console.log(this.arrayPromise) }) } stopedCar(e, t) { localStorage.getItem("started") === "true" && localStorage.setItem("stoped", "true"), fetch(`http://127.0.0.1:3000/engine?id=${e}&status=stopped`, { method: "PATCH" }).then(n => n.json()).then(n => { var a, r; console.log(n), ((a = t.parentElement.nextSibling) == null ? void 0 : a.childNodes[0]).style.animation = "", ((r = t.parentElement.nextSibling) == null ? void 0 : r.childNodes[0]).style.left = "0%" }) } async driveCar(e, t, n) { return new Promise((a, r) => { var l; ((l = t.parentElement.nextSibling) == null ? void 0 : l.childNodes[0]).style.animation = `go-left-right ${n.distance / n.velocity}ms forwards`; let i = Date.now(); fetch(`http://127.0.0.1:3000/engine?id=${e}&status=drive`, { method: "PATCH" }).then(s => s.json()).then(s => { var p; console.log(localStorage.getItem("stoped") !== "true", localStorage.getItem("started") === "true"), localStorage.getItem("stoped") !== "true" && localStorage.getItem("started") === "true" && (console.log(1, s), ((p = t.parentElement.nextSibling) == null ? void 0 : p.childNodes[0]).style.left = "85%"); let g = ((Date.now() - i) / 1e3).toFixed(1); a({ time: Number(g), ids: e }), console.log(s), localStorage.removeItem("stoped"), localStorage.removeItem("started") }).catch(s => { var c; localStorage.getItem("stoped") !== "true" && localStorage.getItem("started") === "true" && (((c = t.parentElement.nextSibling) == null ? void 0 : c.childNodes[0]).style.animationPlayState = "paused"), r("ОШЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫЫБКА"), console.log(s.message), localStorage.removeItem("stoped"), localStorage.removeItem("started") }) }) } createWinner(e, t) { console.log(e); const n = { id: e, wins: 1, time: t }; fetch(`http://127.0.0.1:3000/winners?id=${e}`).then(a => (console.log(a), a.json())).then(a => { console.log(a[0], a[0].wins + 1); let r = { wins: a[0].wins + 1, time: t }; fetch(`http://127.0.0.1:3000/winners/${e}`, { method: "PUT", headers: { "Content-Type": "application/json" }, body: JSON.stringify(r) }) }).catch(() => { fetch("http://127.0.0.1:3000/winners", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(n) }) }) } RaceGarage() { this.arrayPromise = [], document.querySelectorAll(".btn-management-active").forEach(e => { e.click() }), setTimeout(() => { Promise.any(this.arrayPromise).then(e => { console.log(e), this.createWinner(e.ids, e.time) }) }, 2e3) } ResetGarage() { document.querySelectorAll(".icon-1299198").forEach(e => { e.style.animation = "", e.style.left = "0%" }) } } class b { constructor() { o(this, "wrapperWinners", document.createElement("div")); o(this, "winnersCount", document.createElement("div")); o(this, "pageCountWinners", document.createElement("div")); o(this, "panelWinnersWrap", document.createElement("div")); o(this, "headerTitleGroup", document.createElement("div")) } setTheQuantity(e) { this.winnersCount.textContent = `Winners (${e})`, this.winnersCount.classList.add("set-the-quantity") } setThePages(e) { this.pageCountWinners.textContent = `Page #${e}`, this.pageCountWinners.classList.add("set-the-pages") } setSortLocalStorage(e, t, n) { localStorage.setItem("order", JSON.stringify({ wins: e, id: t, time: n })) } sortUniversalHandler(e) { let t = this.getLocalStorage(); this.sortWinnersApi(t.page, t.limit, e, t.id).then(n => n.json()).then(n => { this.getGarageApi().then(a => a.json()).then(a => { const r = document.createElement("div"); let i = n.map(s => s.id), l = a.filter(s => { if (i.includes(s.id)) return s }); console.log(n, l), r.innerHTML = "", n.forEach((s, c) => { console.log(l[c], s), r.append(this.createListResult(s.id, l[c].color, l[c].name, s.wins, s.time)) }), this.panelWinnersWrap.children[1].remove(), this.panelWinnersWrap.append(r) }) }), e === "id" && (t.id === "ASC" ? t.id = "DESC" : t.id = "ASC"), e === "wins" && (t.wins === "ASC" ? t.wins = "DESC" : t.wins = "ASC"), e === "time" && (t.time === "ASC" ? t.time = "DESC" : t.time = "ASC"), this.setSortLocalStorage(t.wins, t.id, t.time) } generHeaderTitleGroup() { const e = document.createElement("div"); e.classList.add("gener-header-title-group"); const t = document.createElement("div"), n = document.createElement("div"), a = document.createElement("div"), r = document.createElement("div"), i = document.createElement("div"); return n.addEventListener("click", () => { this.sortUniversalHandler("id") }), a.addEventListener("click", () => { this.sortUniversalHandler("wins") }), r.addEventListener("click", () => { this.sortUniversalHandler("time") }), t.textContent = "Car", n.textContent = "Number", a.textContent = "Wins", r.textContent = "Best time (seconds)", i.textContent = "Name", e.append(n, t, i, a, r), e } panelWinners(e, t) { const n = document.createElement("div"); console.log(e); let a = e.map(i => i.id), r = t.filter(i => { if (a.includes(i.id)) return i }); console.log(e, r), e.forEach((i, l) => { console.log(r[l]), n.append(this.createListResult(i.id, r[l].color, r[l].name, i.wins, i.time)) }), this.panelWinnersWrap.innerHTML = "", this.panelWinnersWrap.append(this.generHeaderTitleGroup(), n) } getWinnersApi(e, t) { return fetch(`http://127.0.0.1:3000/winners?_page=${e}&_limit=${t}`) } sortWinnersApi(e, t, n, a) { return fetch(`http://127.0.0.1:3000/winners?_page=${e}&_limit=${t}&_sort=${n}&_order=${a}`) } getGarageApi() { return fetch("http://127.0.0.1:3000/garage") } generationWinner() { let e = this.getLocalStorage(); return this.getWinnersApi(e.page, e.limit).then(t => t.json()).then(t => { this.setTheQuantity(t.length), this.setThePages(Math.ceil(t.length / 7)), this.getGarageApi().then(n => n.json()).then(n => this.panelWinners(t, n)) }), this.wrapperWinners.append(this.winnersCount, this.pageCountWinners, this.panelWinnersWrap), this.wrapperWinners } createListResult(e, t, n, a, r) { const i = document.createElement("div"); i.classList.add("list-result"); const l = document.createElement("div"); l.classList.add("icon-1299198"), l.classList.add("wins"); const s = document.createElement("div"), c = document.createElement("div"), g = document.createElement("div"), p = document.createElement("div"); return s.textContent = e.toString(), l.style.color = t, c.textContent = a.toString(), g.textContent = r.toString(), p.textContent = n, i.append(s, l, p, c, g), i } getLocalStorage() { let e, t, n = localStorage.getItem("pageLimitWin"), a = localStorage.getItem("order"); return e = JSON.parse(n), t = JSON.parse(a), Object.assign(e, t) } } let v = new m; const S = new b; class y { constructor() { o(this, "switchPanel", document.createElement("div")); o(this, "garage", this.createButton2("TO GARAGE", "to-garage")); o(this, "winners", this.createButton2("TO WINNERS", "to-winners")) } createButton2(e, t) { const n = document.createElement("button"); return n.classList.add("custom-btn", "btn-3", t), n.textContent = e, n } getSwitchPanel() { return this.switchPanel.classList.add("switch-panel"), this.winners.addEventListener("click", () => { var t; let e = (t = document.getElementById("app")) == null ? void 0 : t.children; for (let n = 1; n < e.length; n++)e[n].remove(); console.log(document.getElementById("app").cloneNode()), document.getElementById("app").append(S.generationWinner()) }), this.garage.addEventListener("click", () => { console.log(document.getElementById("app").cloneNode()), v.generationOfTheGaragePage(!0) }), this.switchPanel.append(this.garage, this.winners), this.switchPanel } } let f = new m, L = new y; f.generationOfTheGaragePage(); var h; (h = document.querySelector("#app")) == null || h.append(L.getSwitchPanel(), f.pageTitleRaceGarage);
